-- CLASS TEST

class "Class"
function Class:__init(instance, args)
  print("Class:__init()")
  args = args or {}
  if instance then
    self.instance = getmetatable(instance)
  end
  if self.instance and self.instance["__init"] then
    self.instance["__init"](self.instance, unpack(args))
  end
end
function Class:__finalize()
  print("Class:__finalize()")
  if self.instance and self.instance["__finalize"] then
    self.instance["__finalize"](self.instance)
  end
end

function defineClass(namespace, relativeClassName, definition)
  local namespaceClass = namespace[relativeClassName.."_mt"]
  namespaceClass = {}
  for k,v in next,definition do
    namespaceClass[k] = v
  end
  namespace[relativeClassName] = function(...)
    local result = {}
    setmetatable(result, namespaceClass)
    result["__holder"] = Class(result, args)
    return result
  end
end

function _class(className)
 local namespaceClass = _G
 local namespace = _G
 local relativeClassName = ""
 for name in string.gmatch(className, "[^%.]+") do
   if not namespaceClass[name] then
     namespaceClass[name] = {}
   end
   namespace = namespaceClass
   relativeClassName = name
   namespaceClass = namespaceClass[name]
 end
 return function(definition) defineClass(namespace, relativeClassName, definition) end
end

_class "just.a.test"
{
  __init = function(self)
    print("__init()")
  end,
  
  __finalize = function(self)
    print("__finalize()")
  end
}

local t = just.a.test()
t = nil

-- CLASS TEST END

require("lost.common.Profiler")

function main(application)
  GuiroTestController:initialize(application)
end

GuiroTestController =
{
  profilerEnabled = false
}

function GuiroTestController:initialize(application)
  self.app = application

  if self.profilerEnabled then
    self.profiler = lost.common.Profiler()
  end

  self.app:addEventListener(lost.application.ApplicationEvent.RUN, function(event) self:run(event) end)
  self.app:addEventListener(lost.application.ApplicationEvent.QUIT, function(event) self:quit(event) end)
  self.app:addEventListener(lost.application.ApplicationEvent.TERMINATE, function(event) self:terminate(event) end)

--  self.app:addEventListener(lost.application.ResizeEvent.WINDOW_RESIZE, function(event) self:resizeHandler(event) end)

  self.app:addEventListener(lost.application.KeyEvent.KEY_DOWN, function(event) self:keyHandler(event) end)
  self.app:addEventListener(lost.application.KeyEvent.KEY_UP, function(event) self:keyHandler(event) end)

  self.window = self.app:createWindow("MainWindow", lost.application.WindowParams("GuiroTest", lost.math.Rect(100, 100, 800, 600)))

  self.controls = {}
  self.controls.fpsMeter = lost.common.FpsMeter()

  require("lost.io.Guiro")
  self.loader = lost.io.Loader(self.app.loader)
  if lost.platform.isIPhone() then
    self.controls.screen = self.loader:loadScreen("screen-iphone")
  else
    self.controls.screen = self.loader:loadScreen("screen-evtest")
--    self.controls.screen = self.loader:loadScreen("screen")
  end
  self.controls.screen:setEventDispatcher(self.app)

  -- print out class hierarchy
  log.debug("class hierarchy:")
  lost.guiro.View:printBases()
  lost.guiro.Screen:printBases()
  lost.guiro.UserInterface:printBases()
  lost.guiro.controls.Button:printBases()
  lost.guiro.controls.Window:printBases()
  -- print out view hierarchy
  log.debug("view hierarchy:")
  self.controls.screen:printChildren()
  
  self.renderState = lost.gl.State.create(lost.gl.ClearColor.create(lost.common.Color(1,1,0)),
                                          lost.gl.DepthTest.create(false),
                                          lost.gl.Texture2D.create(false),
                                          lost.gl.VertexArray.create(true))

  self.passedSec = lost.platform.currentTimeSeconds()
  self.app:setRunLoop(function(sender) local currentSec = lost.platform.currentTimeSeconds() self:runLoop(sender, currentSec - self.passedSec) self.passedSec = currentSec end)
end

function GuiroTestController:run(event)
  log.debug("run")
  
  if self.profilerEnabled then
    self.profiler:enable()
  end
end

function GuiroTestController:quit(event)
  log.debug("beforeExit")
end

function GuiroTestController:terminate(event)
  if self.profilerEnabled then
    self.profiler:disable()
    self.profiler:report()
  end

  log.debug("exit")
end

function GuiroTestController:resizeHandler(event)
  local resizeEvent = lost.application.ResizeEvent.cast(event)

--  if not lost.platform.isIPhone() and controls and controls.screen then
--    local g = lost.guiro
--    controls.screen:resize(g.Bounds(g.xabs(0), g.yabs(0), g.wabs(resizeEvent.width), g.habs(resizeEvent.height)))
--  end
end

function GuiroTestController:keyHandler(event)
  keyEvent = lost.application.KeyEvent.cast(event)
  
  if (keyEvent.pressed) then
  
    if (keyEvent.key == lost.application.K_ESCAPE) then
      self.app:quit()
    end
  
  end
end

function GuiroTestController:runLoop(sender, passedSec)
  self.window.context:makeCurrent()
  self.window.context:pushState(self.renderState)
  self.window.canvas:clear(gl.GL_COLOR_BUFFER_BIT + gl.GL_DEPTH_BUFFER_BIT)

  self.window.canvas.camera:apply()
  gl.glMatrixMode(gl.GL_MODELVIEW)

  gl.glLoadIdentity()
  self.controls.screen:render(self.window.canvas, true)

  gl.glLoadIdentity()
  self.controls.fpsMeter:render(800 - self.controls.fpsMeter.width, 1, self.window.canvas, passedSec)

  self.window.context:popState()
  self.window.context:swapBuffers()
--	log.debug("interpreter memory usage in kb: "..environment.interpreter:memUsage())
end
