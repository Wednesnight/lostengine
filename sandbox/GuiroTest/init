-- ANOTHER CLASS TEST

-- just a helper class to verify that free/destroy trigger the garbage collector
class "foobar"
function foobar:__init()
  print("foobar:__init()")
end
function foobar:__finalize()
  print("foobar:__finalize()")
end

function _class(class)
  local namespace = expandNamespace(class)
  local definition = {}
  _class_derived = function(class)
    if type(class) == "string" then
      local ancestor = expandNamespace(class)
      for k,v in next,ancestor do
        definition[k] = v
      end
      return _class_derived
    elseif type(class) == "table" then
      for k,v in next,class do
        definition[k] = v
      end
      return declareClass(namespace, definition)
    else
      log.error("_class: invalid param of type ".. type(class))
    end
  end
  return _class_derived
end

function expandNamespace(className)
  local namespace = _G
  for name in string.gmatch(className, "[^%.]+") do
    if not namespace[name] then
      namespace[name] = {}
    end
    namespace = namespace[name]
  end
  return namespace
end

function declareClass(namespace, definition)
  for k,v in next,definition do
    namespace[k] = v
  end
  local metatable =
  {
    __call = function(self, ...)
      local object = {}
      -- assign members, methods
      for key,value in next,self do
        object[key] = value
      end
      -- assign operators
      setmetatable(object, self)
      -- make sure that free is our cleanup function
      object.free = function(self)
        if self and type(self.destroy) == "function" then
          self:destroy()
        end
        self = nil
      end
      if type(object.create) == "function" then
        object:create(args)
      end
      return object
    end
  }
  setmetatable(namespace, metatable)
end

_class "just.a.test"
{
  create = function(self)
    print("create()")
  end,
  
  destroy = function(self)
    print("destroy()")
  end
}

function just.a.test:foo(bar)
  --
end

function just.a.test:__call(foo)
  log.debug(foo)
end

_class "another.test" "just.a.test"
{
  testing = function(self, what)
    log.debug(what)
  end
}

_class "funky.test" "another.test" "just.a.test"
{
}

local t = funky.test()
t.fgfg = "eflkjn"
t("yay")
t:testing("yay2")
t:free()

-- ANOTHER CLASS TEST END

require("lost.common.Profiler")

function main(application)
  GuiroTestController:initialize(application)
end

GuiroTestController =
{
  profilerEnabled = false
}

function GuiroTestController:initialize(application)
  self.app = application

  if self.profilerEnabled then
    self.profiler = lost.common.Profiler()
  end

  self.app:addEventListener(lost.application.ApplicationEvent.RUN, function(event) self:run(event) end)
  self.app:addEventListener(lost.application.ApplicationEvent.QUIT, function(event) self:quit(event) end)
  self.app:addEventListener(lost.application.ApplicationEvent.TERMINATE, function(event) self:terminate(event) end)

--  self.app:addEventListener(lost.application.ResizeEvent.WINDOW_RESIZE, function(event) self:resizeHandler(event) end)

  self.app:addEventListener(lost.application.KeyEvent.KEY_DOWN, function(event) self:keyHandler(event) end)
  self.app:addEventListener(lost.application.KeyEvent.KEY_UP, function(event) self:keyHandler(event) end)

  if lost.platform.isIPhone() then
    self.windowSize = lost.math.Vec2(320, 480)
  else
    self.windowSize = lost.math.Vec2(800, 600)
  end
  self.window = self.app:createWindow("MainWindow", lost.application.WindowParams("GuiroTest", lost.math.Rect(100, 100, self.windowSize.x, self.windowSize.y)))

  self.controls = {}
  self.controls.fpsMeter = lost.common.FpsMeter()

  require("lost.io.Guiro")
  self.loader = lost.io.Loader(self.app.loader)
  if lost.platform.isIPhone() then
    self.controls.screen = self.loader:loadScreen("screen-iphone")
  else
    self.controls.screen = self.loader:loadScreen("screen-evtest")
--    self.controls.screen = self.loader:loadScreen("screen")
  end
  self.controls.screen:setEventDispatcher(self.app)

  -- print out class hierarchy
  log.debug("class hierarchy:")
  lost.guiro.View:printBases()
  lost.guiro.Screen:printBases()
  lost.guiro.UserInterface:printBases()
  lost.guiro.controls.Button:printBases()
  lost.guiro.controls.Window:printBases()
  -- print out view hierarchy
  log.debug("view hierarchy:")
  self.controls.screen:printChildren()
  
  self.renderState = lost.gl.State.create(lost.gl.ClearColor.create(lost.common.Color(1,1,0)),
                                          lost.gl.DepthTest.create(false),
                                          lost.gl.Texture2D.create(false),
                                          lost.gl.VertexArray.create(true))

  self.passedSec = lost.platform.currentTimeSeconds()
  self.app:setRunLoop(function(sender) local currentSec = lost.platform.currentTimeSeconds() self:runLoop(sender, currentSec - self.passedSec) self.passedSec = currentSec end)
end

function GuiroTestController:run(event)
  log.debug("run")
  
  if self.profilerEnabled then
    self.profiler:enable()
  end
end

function GuiroTestController:quit(event)
  log.debug("beforeExit")
end

function GuiroTestController:terminate(event)
  if self.profilerEnabled then
    self.profiler:disable()
    self.profiler:report()
  end

  log.debug("exit")
end

function GuiroTestController:resizeHandler(event)
  local resizeEvent = lost.application.ResizeEvent.cast(event)

--  if not lost.platform.isIPhone() and controls and controls.screen then
--    local g = lost.guiro
--    controls.screen:resize(g.Bounds(g.xabs(0), g.yabs(0), g.wabs(resizeEvent.width), g.habs(resizeEvent.height)))
--  end
end

function GuiroTestController:keyHandler(event)
  keyEvent = lost.application.KeyEvent.cast(event)
  
  if (keyEvent.pressed) then
  
    if (keyEvent.key == lost.application.K_ESCAPE) then
      self.app:quit()
    end
  
  end
end

function GuiroTestController:runLoop(sender, passedSec)
  if not self.contextOk then
    self.window.context:makeCurrent()
--    self.window.context:vsync(true)
--    self.window.context:multithreaded(true)
    self.contextOk = true
  end
  self.window.context:pushState(self.renderState)
  self.window.canvas:clear(gl.GL_COLOR_BUFFER_BIT + gl.GL_DEPTH_BUFFER_BIT)

  self.window.canvas.camera:apply()
  gl.glMatrixMode(gl.GL_MODELVIEW)

  gl.glLoadIdentity()
  self.controls.screen:render(self.window.canvas, true)

  gl.glLoadIdentity()
  self.controls.fpsMeter:render(self.windowSize.x - self.controls.fpsMeter.width, 1, self.window.canvas, passedSec)

  self.window.context:popState()
  self.window.context:swapBuffers()
--	log.debug("interpreter memory usage in kb: "..environment.interpreter:memUsage())
end
