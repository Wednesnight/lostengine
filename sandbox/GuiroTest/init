require("lost.common.Profiler")

function main(application)
  GuiroTestController:initialize(application)
end

GuiroTestController =
{
  profilerEnabled = false
}

function GuiroTestController:initialize(application)
  self.app = application

  if self.profilerEnabled then
    self.profiler = lost.common.Profiler()
  end

  self.app:addEventListener(lost.application.ApplicationEvent.RUN, function(event) self:run(event) end)
  self.app:addEventListener(lost.application.ApplicationEvent.QUIT, function(event) self:quit(event) end)
  self.app:addEventListener(lost.application.ApplicationEvent.TERMINATE, function(event) self:terminate(event) end)

--  self.app:addEventListener(lost.application.ResizeEvent.WINDOW_RESIZE, function(event) self:resizeHandler(event) end)

  self.app:addEventListener(lost.application.KeyEvent.KEY_DOWN, function(event) self:keyHandler(event) end)
  self.app:addEventListener(lost.application.KeyEvent.KEY_UP, function(event) self:keyHandler(event) end)

  self.window = self.app:createWindow("MainWindow", lost.application.WindowParams("GuiroTest", lost.math.Vec2(800, 600), lost.math.Vec2(100, 100)))

  self.displayAttributes = lost.common.DisplayAttributes()
  if (lost.platform.isIPhone()) then
    self.displayAttributes.width = 320
    self.displayAttributes.height = 480
  else
    self.displayAttributes.width = 800
    self.displayAttributes.height = 600
  end
  self.context = lost.gl.Context(self.displayAttributes)

  self.controls = {}
  self.controls.fpsMeter = lost.common.FpsMeter(self.context)

  require("lost.io.Guiro")
  self.loader = lost.io.Loader(self.app.loader)
  if lost.platform.isIPhone() then
    self.controls.screen = self.loader:loadScreen("screen-iphone")
  else
    self.controls.screen = self.loader:loadScreen("screen")
  end
  self.controls.screen:setEventDispatcher(self.app)

  -- print out class hierarchy
  log.debug("class hierarchy:")
  lost.guiro.View:printBases()
  lost.guiro.Screen:printBases()
  lost.guiro.UserInterface:printBases()
  lost.guiro.controls.Control:printBases()
  lost.guiro.controls.Button:printBases()
  lost.guiro.controls.Window:printBases()
  -- print out view hierarchy
  log.debug("view hierarchy:")
  self.controls.screen:printChildren()
  
  self.renderState = self.context:copyState()
  self.renderState.clearColor = lost.common.Color(0,0,0)
  self.renderState.depthTest = false
  self.renderState.texture2D = false
  self.renderState.vertexArray = true

  self.passedSec = lost.platform.currentTimeSeconds()
  self.app:setRunLoop(function(sender) local currentSec = lost.platform.currentTimeSeconds() self:runLoop(sender, currentSec - self.passedSec) self.passedSec = currentSec end)
end

function GuiroTestController:run(event)
  log.debug("run")
  
  if self.profilerEnabled then
    self.profiler:enable()
  end
end

function GuiroTestController:quit(event)
  log.debug("beforeExit")
end

function GuiroTestController:terminate(event)
  if self.profilerEnabled then
    self.profiler:disable()
    self.profiler:report()
  end

  log.debug("exit")
end

function GuiroTestController:resizeHandler(event)
  local resizeEvent = lost.application.ResizeEvent.cast(event)

--  if not lost.platform.isIPhone() and controls and controls.screen then
--    local g = lost.guiro
--    controls.screen:resize(g.Bounds(g.xabs(0), g.yabs(0), g.wabs(resizeEvent.width), g.habs(resizeEvent.height)))
--  end
end

function GuiroTestController:keyHandler(event)
  keyEvent = lost.application.KeyEvent.cast(event)
  
  if (keyEvent.pressed) then
  
    if (keyEvent.key == lost.application.K_ESCAPE) then
      self.app:quit()
    end
  
  end
end

function GuiroTestController:runLoop(sender, passedSec)
  self.window.context:makeCurrent()
  self.context:pushState(self.renderState)
  self.context:clear(gl.GL_COLOR_BUFFER_BIT or gl.GL_DEPTH_BUFFER_BIT)

  self.context:set2DProjection(lost.math.Vec2(0,0), lost.math.Vec2(self.displayAttributes.width, self.displayAttributes.height))
  gl.glMatrixMode(gl.GL_MODELVIEW)

  gl.glLoadIdentity()
  self.controls.screen:render(self.context)

  gl.glLoadIdentity()
  self.controls.fpsMeter:render(self.displayAttributes.width - self.controls.fpsMeter.width, 1, passedSec)

  self.context:popState()
  self.window.context:swapBuffers()
end
