require("lost.application.Application")
require("lost.guiro.controls.Button")

require("lost.io.Loader")
require("lost.io.Screen")
local foo = lost.io.Loader(globals.app.loader)
foo:load("mainScreen.lua")

-- testing
function applyChildren(view, children)
  log.debug("applyChildren()")
  if (view and children) then
    for name,object in next,children do
      if type(object) == "userdata" then
        log.debug("setting child: ".. name)
        --view.applyChild(object)
      end
    end
  end
end

function applyProperties(view, properties)
  log.debug("applyProperties()")
  if (view and properties) then
    for name,value in next,properties do
      if type(name) == "string" then
        log.debug("setting property: ".. name)
        view[name] = value
      end
    end
  end
end

function defineView(view, definition)
  log.debug("defineView()")
  applyProperties(view, definition)
  applyChildren(view, definition)
  return view
end

lost.guiro.controls.Window = lost.guiro.View
function Window(definition)
  log.debug("Window()")
  return defineView(lost.guiro.controls.Window(), definition)
end

lost.guiro.controls.Text = lost.guiro.View
function Text(definition)
  log.debug("Text()")
  return defineView(lost.guiro.controls.Text(), definition)
end

window = Window
{
  width = 640,
  height = 480,
  text = Text
  {
    width = 100,
    font = "font.ttf"
  }
}

log.debug(window["width"])
log.debug(window["height"])
log.debug(window.text["width"])
log.debug(window.text["font"])

--[[
for k,v in next,_G do
  print(k,v)
end
]]

function lost.application.Application:configure(event)
  self.config.displayAttributes = lost.common.DisplayAttributes()
  self.config.displayAttributes.width = 800;
  self.config.displayAttributes.height = 600;
  self.config.displayAttributes.redbits = 8;
  self.config.displayAttributes.bluebits = 8;
  self.config.displayAttributes.greenbits = 8;
  self.config.displayAttributes.alphabits = 8;
  self.config.displayAttributes.depthbits = 24;
  self.config.displayAttributes.stencilbits = 0;
  self.config.displayAttributes.fullscreen = false;
  self.config.displayAttributes.title = "GuiroTest";

  self:addEventListener(lost.application.ResizeEvent.MAIN_WINDOW_RESIZE, resizeHandler)
  self:addEventListener(lost.application.ApplicationEvent.RUN, runHandler)
  self:addEventListener(lost.application.ApplicationEvent.QUIT, quitHandler)

  self:addEventListener(lost.application.KeyEvent.KEY_DOWN, keyHandler)
  self:addEventListener(lost.application.KeyEvent.KEY_UP, keyHandler)
end

function lost.application.Application:init(event)
  log.debug("init")

  controls = {}
  controls.button = lost.guiro.controls.Button()
  controls.fpsMeter = lost.common.FpsMeter(self.context)

  globals.timer = lost.application.Timer("luarender", 0.015)
  globals.timer:addEventListener(lost.application.TimerEvent.TIMER_FIRED, renderHandler)
end

function keyHandler(event)
  keyEvent = lost.application.KeyEvent.cast(event)
  
  if (keyEvent.pressed) then
  
    if (keyEvent.key == lost.application.K_ESCAPE) then
      globals.app:quit()
    end
  
  end
end

function runHandler(event)
  log.debug("run")
end

function quitHandler(event)
  log.debug("quit")
  
  controls.button = nil
end

function renderHandler(event)
  local timerEvent = lost.application.TimerEvent.cast(event)

  gl.glClearColor(0.0, 0.0, 0.0, 0.0) gl.GLDEBUG()
  gl.glClear(gl.GL_COLOR_BUFFER_BIT or gl.GL_DEPTH_BUFFER_BIT) gl.GLDEBUG()

  lost.gl.utils.set2DProjection(lost.math.Vec2(0,0), lost.math.Vec2(globals.app.displayAttributes.width, globals.app.displayAttributes.height))
  gl.glMatrixMode(gl.GL_MODELVIEW)
  gl.glLoadIdentity()
  gl.glEnableClientState(gl.GL_VERTEX_ARRAY) gl.GLDEBUG()
  gl.glDisable(gl.GL_DEPTH_TEST) gl.GLDEBUG()
  gl.glDisable(gl.GL_TEXTURE_2D) gl.GLDEBUG()

  controls.button:internalRender()
  controls.fpsMeter:render(globals.app.displayAttributes.width - controls.fpsMeter.width, 0, timerEvent.passedSec)

  gl.glDisableClientState(gl.GL_VERTEX_ARRAY) gl.GLDEBUG()
  
  globals.app:swapBuffers()
end

function resizeHandler(event)
  local resizeEvent = lost.application.ResizeEvent.cast(event)

  gl.glViewport(0, 0, resizeEvent.width, resizeEvent.height) gl.GLDEBUG()
end
