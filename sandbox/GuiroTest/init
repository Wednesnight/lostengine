require("lost.application.Application")

function lost.application.Application:configure(event)
  self.config.displayAttributes = lost.common.DisplayAttributes()
  if lost.platform.isIPhone() then
    self.config.displayAttributes.width = 320
    self.config.displayAttributes.height = 480
  else
    self.config.displayAttributes.width = 800
    self.config.displayAttributes.height = 600
  end
  self.config.displayAttributes.redbits = 8;
  self.config.displayAttributes.bluebits = 8;
  self.config.displayAttributes.greenbits = 8;
  self.config.displayAttributes.alphabits = 8;
  self.config.displayAttributes.depthbits = 24;
  self.config.displayAttributes.stencilbits = 0;
  self.config.displayAttributes.fullscreen = false;
  self.config.displayAttributes.title = "GuiroTest";

  self:addEventListener(lost.application.ResizeEvent.MAIN_WINDOW_RESIZE, function(event) self:resizeHandler(event) end)
  self:addEventListener(lost.application.KeyEvent.KEY_DOWN, function(event) self:keyHandler(event) end)
  self:addEventListener(lost.application.KeyEvent.KEY_UP, function(event) self:keyHandler(event) end)
end

function lost.application.Application:init(event)
  log.debug("init")

  controls = {}
  controls.fpsMeter = lost.common.FpsMeter(self.context)

  require("lost.io.Guiro")
  controls.loader = lost.io.Loader(globals.app.loader)
  controls.screen = controls.loader:loadScreen("screen")
  self.screen = controls.screen

  -- print out class hierarchy
  log.debug("class hierarchy:")
  lost.guiro.View:printBases()
  lost.guiro.Screen:printBases()
  lost.guiro.UserInterface:printBases()
  lost.guiro.controls.Control:printBases()
  lost.guiro.controls.Button:printBases()
  lost.guiro.controls.Window:printBases()
  -- print out view hierarchy
  log.debug("view hierarchy:")
  controls.screen:printChildren()

  self.renderState = self.context:copyState()
  self.renderState.clearColor = lost.common.Color(0,0,0)
  self.renderState.depthTest = false
  self.renderState.texture2D = false
  self.renderState.vertexArray = true

  globals.timer = lost.application.Timer("luarender", 1/30)
  globals.timer:addEventListener(lost.application.TimerEvent.TIMER_FIRED, function(event) self:renderHandler(event) end)
end

function lost.application.Application:run(event)
  log.debug("run")
end

function lost.application.Application:exit(event)
  log.debug("exit")
end

function lost.application.Application:resizeHandler(event)
  local resizeEvent = lost.application.ResizeEvent.cast(event)

  gl.glViewport(0, 0, resizeEvent.width, resizeEvent.height) gl.GLDEBUG()
end

function lost.application.Application:keyHandler(event)
  keyEvent = lost.application.KeyEvent.cast(event)
  
  if (keyEvent.pressed) then
  
    if (keyEvent.key == lost.application.K_ESCAPE) then
      self:quit()
    end
  
  end
end

function lost.application.Application:renderHandler(event)
  local timerEvent = lost.application.TimerEvent.cast(event)

  self.context:pushState(self.renderState)
  self.context:clear(gl.GL_COLOR_BUFFER_BIT or gl.GL_DEPTH_BUFFER_BIT)
  self.context:set2DProjection(lost.math.Vec2(0,0), lost.math.Vec2(self.config.displayAttributes.width, self.config.displayAttributes.height))

  gl.glMatrixMode(gl.GL_MODELVIEW)
  gl.glLoadIdentity()

  controls.screen:render(self.context)
  controls.fpsMeter:render(self.displayAttributes.width - controls.fpsMeter.width, 0, timerEvent.passedSec)

  self.context:popState()
  
  globals.app:swapBuffers()
end
