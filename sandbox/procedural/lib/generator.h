#ifndef GENERATOR_H
#define GENERATOR_H

#include <cmath>
#include <stdint.h>
#include <boost/shared_ptr.hpp>
#include <iostream>
static const float pi = 3.14159f;

struct generator
{
    float val; // stores the value generated by teh last call to tick
    generator(float inVal) :val(inVal) {std::cout << "generator constructed" << std::endl;}
    virtual ~generator() {}

    virtual float tick(float delta) = 0; // advance the given amount of time
    virtual void rewind() = 0; // rewind the previous advance in time
};

struct constgen : public generator
{
    constgen(float inv) : generator(inv) {}    
    float tick(float delta) {return val;}    
    void rewind() {}
};

struct periodicalgenerator : public generator
{
    float currentTime;
    float previousTime;
    boost::shared_ptr<generator>  period;
    
    periodicalgenerator(boost::shared_ptr<generator> inPeriod)
    : period(inPeriod), generator(0.0f)
    {
        currentTime = 0;
        previousTime = 0;
    }

    // call this from within tick so you don't have to bother with time housekeeping
    virtual float tick(float delta)
    {
        previousTime = currentTime;
        currentTime = fmod((currentTime + delta), period->tick(delta));    
        return 0.0f;
    }

    // returns current time within period as radians value
    float timeAsRad(float curtime, float curperiod)
    {
        return (curtime/curperiod)*2.0f*pi;    
    }

    virtual void rewind()
    {
        period->rewind();
        currentTime = previousTime;
    }
};

struct trigogen : public periodicalgenerator
{
    trigogen(boost::shared_ptr<generator> inOffset,
             boost::shared_ptr<generator> inRange,
             boost::shared_ptr<generator> inPeriod)
    : offset(inOffset), range(inRange), periodicalgenerator(inPeriod)
    {
    }
    
    virtual float tick(float delta)
    {
        periodicalgenerator::tick(delta);
        offset->tick(delta);
        range->tick(delta);
        return val;
    }
    
    virtual void rewind()
    {
        periodicalgenerator::rewind();
        offset->rewind();
        range->rewind();
    }
    
    boost::shared_ptr<generator> offset;
    boost::shared_ptr<generator> range;
};

struct sinegen : public trigogen
{
    sinegen(boost::shared_ptr<generator> inOffset, 
            boost::shared_ptr<generator> inRange,
            boost::shared_ptr<generator> inPeriod)
    : trigogen(inOffset, inRange, inPeriod)
    {
    }
    
    float tick(float delta)
    {
        trigogen::tick(delta);
        val = offset->val+std::sin(timeAsRad(currentTime, period->val))*(range->val);
        return val;
    }
    
    void rewind()
    {
        trigogen::rewind();
    }
};

struct cosgen : public trigogen
{
    cosgen(boost::shared_ptr<generator> inOffset,
           boost::shared_ptr<generator> inRange,
           boost::shared_ptr<generator> inPeriod)
    : trigogen(inOffset, inRange, inPeriod)
    {
    }

    float tick(float delta)
    {
        trigogen::tick(delta);
        val = offset->val+std::cos(timeAsRad(currentTime, period->val))*(range->val);
        return val;
    }
    
    void rewind()
    {
        trigogen::rewind();
    }    
};


#endif
