/*
 * shared_ptr.hpp - Copyright (C) 2007 by Nathan Reed
 * Smart pointer with reference counting.
 * This is compatible with boost::shared_ptr, in the sense that it implements
 * a strict subset of boost_shared_ptr's functionality.
 */

#ifndef SHARED_PTR_HPP
#define SHARED_PTR_HPP

// Disable "unreachable code" warning generated by hash_map in release build
#ifdef _MSC_VER
#	pragma warning (push)
#	pragma warning (disable: 4702)
#	include <hash_map>
#	pragma warning (pop)
#else
#	include <ext/hash_map>
#endif

namespace luabridge
{
	template <typename T>
	class shared_ptr
	{
		T* ptr;
	public:
		shared_ptr (T* ptr_);

		// Copy constructors: the first one is necessary to write out,
		// since the compiler doesn't recognize the second as a copy ctor
		shared_ptr (const shared_ptr<T>& rhs);
		template <typename U> shared_ptr (const shared_ptr<U>& rhs);

		template <typename U> shared_ptr& operator =
			(const shared_ptr<U> & rhs);

		T* get () const;
		T* operator * () const;
		T* operator -> () const;
		long use_count () const;

		void reset ();
		~shared_ptr ();
	};

	// Include implementation
#	include "impl/shared_ptr.hpp"
}

#endif
