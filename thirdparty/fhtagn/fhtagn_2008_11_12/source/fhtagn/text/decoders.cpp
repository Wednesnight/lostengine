/**
 * $Id: decoders.cpp 173 2008-08-22 14:07:44Z unwesen $
 *
 * Copyright (C) 2007 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/

#include <fhtagn/text/transcoding.h>
#include <fhtagn/text/detail/universal.h>


namespace fhtagn {
namespace text {


universal_decoder::universal_decoder(char_encoding_type encoding /* = ASCII */)
    : m_encoding(encoding)
    , m_decoder(0)
{
    set_encoding(encoding);
}


universal_decoder::~universal_decoder()
{
    FHTAGN_TEXT_DESTROY(m_encoding, m_decoder, decoder);
}



void
universal_decoder::set_encoding(char_encoding_type new_encoding)
{
    FHTAGN_TEXT_DESTROY(m_encoding, m_decoder, decoder);
    m_encoding = new_encoding;
    FHTAGN_TEXT_CREATE(m_encoding, m_decoder, decoder);
}



void
universal_decoder::reset()
{
    FHTAGN_TEXT_CALL(m_encoding, m_decoder, decoder, reset, ());
}


bool
universal_decoder::append(unsigned char byte)
{
    FHTAGN_TEXT_CALL(m_encoding, m_decoder, decoder, append, (byte));
    return false;
}


bool
universal_decoder::have_full_sequence() const
{
    FHTAGN_TEXT_CALL(m_encoding, m_decoder, decoder, have_full_sequence, ());
    return false;
}


utf32_char_t
universal_decoder::to_utf32() const
{
    FHTAGN_TEXT_CALL(m_encoding, m_decoder, decoder, to_utf32, ());
    return utf32_char_t();
}


bool
universal_decoder::use_replacement_char() const
{
    FHTAGN_TEXT_CALL(m_encoding, m_decoder, decoder, use_replacement_char, ());
    return false;
}


void
universal_decoder::use_replacement_char(bool new_value)
{
    FHTAGN_TEXT_CALL(m_encoding, m_decoder, decoder, use_replacement_char,
            (new_value));
}


utf32_char_t
universal_decoder::replacement_char() const
{
    FHTAGN_TEXT_CALL(m_encoding, m_decoder, decoder, replacement_char, ());
    return utf32_char_t();
}


void
universal_decoder::replacement_char(utf32_char_t new_value)
{
    FHTAGN_TEXT_CALL(m_encoding, m_decoder, decoder, replacement_char,
            (new_value));
}



}} // namespace fhtagn::text
