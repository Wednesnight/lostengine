/**
 * $Id: container.h 197 2008-11-02 12:02:37Z unwesen $
 *
 * Copyright (C) 2007 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#ifndef FHTAGN_DETAIL_CONTAINER_RESTRICTIONS_H
#define FHTAGN_DETAIL_CONTAINER_RESTRICTIONS_H

#ifndef __cplusplus
#error You are trying to include a C++ only header file
#endif

#include <fhtagn/fhtagn.h>

namespace fhtagn {
namespace restrictions {
namespace container {

/**
 * Enforces non-empty container types, where any valueT that has an empty()
 * function that returns true when the value is empty is considered a container
 * type.
 **/
template <
    typename valueT,
    typename next_restrictionT = none<valueT>
>
struct non_empty
{
    static inline valueT const & check(valueT const & value)
    {
        boost::function_requires<concepts::RestrictionConcept<valueT, next_restrictionT> >();

        if (value.empty()) {
            throw violation_error("fhtagn::restrictions::container::non_empty failed!");
        }
        return next_restrictionT::check(value);
    }
};


/**
 * Enforces empty container types, where any valueT that has an empty() function
 * that returns true when the value is empty is considered a container type.
 **/
template <
    typename valueT,
    typename next_restrictionT = none<valueT>
>
struct empty
{
    static inline valueT const & check(valueT const & value)
    {
        boost::function_requires<concepts::RestrictionConcept<valueT, next_restrictionT> >();

        if (!value.empty()) {
            throw violation_error("fhtagn::restrictions::container::empty failed!");
        }
        return next_restrictionT::check(value);
    }
};


}}} // namespace fhtagn::restrictions::container

#endif // guard
