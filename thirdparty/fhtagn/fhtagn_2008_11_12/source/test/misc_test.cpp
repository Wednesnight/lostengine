/**
 * $Id: misc_test.cpp 107 2007-08-24 13:13:24Z unwesen $
 *
 * Copyright (C) 2007 the authors.
 *
 * Author: Jens Finkhaeuser <unwesen@users.sourceforge.net>
 *
 * This file is part of the Fhtagn! C++ Library, and may be distributed under
 * the following license terms:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/

#include <cppunit/extensions/HelperMacros.h>

#include <fhtagn/byteorder.h>

class MiscTest
    : public CppUnit::TestFixture
{
public:
    CPPUNIT_TEST_SUITE(MiscTest);

        CPPUNIT_TEST(testByteOrder);

    CPPUNIT_TEST_SUITE_END();
private:

    void testByteOrder()
    {
        namespace b = fhtagn::byte_order;

        uint16_t x = 1234;
        CPPUNIT_ASSERT_EQUAL(x, b::convert<>::ntoh(b::convert<>::hton(x)));
        uint32_t y = 1234;
        CPPUNIT_ASSERT_EQUAL(y, b::convert<>::ntoh(b::convert<>::hton(y)));
        uint64_t z = 1234;
        CPPUNIT_ASSERT_EQUAL(z, b::convert<>::ntoh(b::convert<>::hton(z)));

        if (b::host_byte_order() == b::FHTAGN_BIG_ENDIAN) {
            CPPUNIT_ASSERT_EQUAL(static_cast<uint16_t>(1234), b::to_host(x, b::FHTAGN_BIG_ENDIAN));
            CPPUNIT_ASSERT_EQUAL(static_cast<uint16_t>(53764), b::to_host(x, b::FHTAGN_LITTLE_ENDIAN));
        } else {
            CPPUNIT_ASSERT_EQUAL(static_cast<uint16_t>(53764), b::to_host(x, b::FHTAGN_BIG_ENDIAN));
            CPPUNIT_ASSERT_EQUAL(static_cast<uint16_t>(1234), b::to_host(x, b::FHTAGN_LITTLE_ENDIAN));
        }
    }

};


CPPUNIT_TEST_SUITE_REGISTRATION(MiscTest);
