      ___
     /   \  Fhtagn!
    /    |  /
    |oO /
   /|| \/\
  //  // VV\
  m . m  |
  ; _, _,>
  '" '"

Copyright (C) 2007,2008,2009 by the authors.
http://fhtagn.unwesen.de/

Requirements
=======================

   The Fhtagn! C++ Library depends heavily on boost. If boost is not part
of your development environment yet, obtain a copy from http://www.boost.org/

   The build system used for Fhtagn! is SCons - you can find it at
http://www.scons.org/ . Familiarity with SCons is not really required, this
document explains all the necessary stuff.

   Lastly, parts of Fhtagn! depend on CppUnit - most notably the unit tests. If
you do not care about the unit tests, Fhtagn! does not have any further
dependencies on CppUnit, but may build an optional fhtagn_util library with some
CppUnit extensions. You can find CppUnit here: http://cppunit.sourceforge.net/


Installation
=======================

   Building and installing via SCons is easy. Simply type `scons' in the root
source directory, and a the build will get started.

   SCons - or the extensions to SCons found in scons_util - does most of the
hard work in finding dependencies. You can help it along by creating a file
`fhtagn.conf' in the root source directory with a few configuration parameters.

   Similar to make, SCons accepts build targets on it's command line. The
default is to build the libraries, and nothing else.

   If you're stuck with SCons, running `scons -H' provides you with available
command line options. Note that this is not the same as running `scons --help',
as that prints configuration options for use in `fhtagn.conf'.


Build Targets
=======================

   Any file or directory under the build directory can be used as a target.
Since all files from the source directory are copied to the build directory,
you can specify those as well. For example `scons test' will build all targets
in the `test' directory.

   In addition, the following targets are defined:

`scons check'
    Builds the testsuite.

`scons install'
    Installs the build artefacts into the configured installation directory (see
    below).


Build Configuration
=======================

   At the time of writing, the Fhtagn! build defines the following build
configuration variables:

CXX: C++ compiler to use

CC: C compiler to use

CXXFLAGS: Flags for the C++ compiler

CFLAGS: Flags for the C compiler

LINKFLAGS: Flags for the linker

BUILD_CONFIG: Target for the build (debug|release)
    default: release

BUILD_LIB_TYPE: Type of library to build (static|shared|both)
    default: both on UNIX-like OSes, static on win32 (see below)

BUILD_PREFIX: Build directory ( /path/to/BUILD_PREFIX )
    default: build

INSTALL_PREFIX: Base path for the installation. ( /path/to/INSTALL_PREFIX )

GCOV: Create code coverage files (yes|no)

BOOST_PREFIX: Base path of boost installation; use this if auto-detection fails.
    ( /path/to/BOOST_PREFIX )

CPPUNIT_PREFIX: Base path of cppunit installation; use this if auto-detection
    fails. ( /path/to/CPPUNIT_PREFIX )


Platforms
=======================

   Fhtagn! is supposed to be pretty portable, but at the time of writing, it
hasn't been built on many platforms yet. The list of currently tested platforms
includes:

   Mac OS 10.4 (Intel), using their version of GCC 4.0.1
   Mac OS 10.5 (Intel), using their version of GCC 4.2.1
   Ubuntu Liux in various versions, using several versions of GCC, on PowerPC,
    32-bit Intel and 64-bit AMD.

   Win32 builds are only partially supported at this time.

   If you can add more platforms to this list, please send a mail to
fhtagn-devel@unwesen.de with details.
