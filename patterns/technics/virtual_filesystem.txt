path syntax: [<structure>/<resource>]

hierarchy:

  ResourceLoader: get( "fonts/suigeneris.ttf" );
  -> VFS*       : get( "fonts/suigeneris.ttf" );

  -> VFSPhysical: get( "/user/resources/fonts/suigeneris.ttf" );

  -> VFSZip     : get( "fonts.zip/suigeneris.ttf" );
  -> VFSZip     : get( "resources.zip/fonts/suigeneris.ttf" );
  
  -> VFSHttp    : get( "http://ficken500.de/fonts/suigeneris.ttf" );

configuration:

  VFSPhysical.xml : <vfs id="VFSPhysical">
                      <resource location="./resources" />
                      <structure name="fonts" location="/user/resources/fonts" />
                    </vfs>

  VFSZip.xml :  <vfs id="VFSZip">
                  <resource location="resources.zip" />
                </vfs>

                OR

                <vfs id="VFSZip">
                  <resource location="resources.zip" />
                  <structure name="fonts" location="fonts.zip" />
                </vfs>

  VFSHttp.xml : <vfs id="VFSHttp">
                  <resource location="http://lostgenius.net/resources" />
                  <structure name="fonts" location="http://ficken500.de/fonts" />
                </vfs>


Chat-Log 05.02.08:
-------------------

12:15:21 Tony: moin :/ 
12:15:33 Jomanto: tach
12:15:42 Jomanto: auch schon wach? :P 
12:18:04 Tony: oh mann
12:18:08 Tony: sag bitte nix, is mir echt peinlich
12:18:16 Tony: danke für die VFS Mails sehr cool!
12:18:55 Jomanto: les sie dir halt mal durch, ist ein simples, rudimentäres konzept
12:19:56 Tony: hab ich schon 
12:20:23 Tony: d.h. der ResourceLoader würde ne Klammer um die verschiedenen VFS Implementierungen bilden und diese priorisieren, ja?
12:20:48 Tony: ich glaube ich bin dagegen, mehr als nötig zu konfigurieren, andererseits müssen wir ja jedem Filesystem sagen, wo sein root ist
12:21:12 Tony: von daher eigentlich super
12:21:14 Jomanto: jup, der ResourceLoader regelt das mit den VFS. obendrüber sollte das nicht interessieren
12:21:39 Jomanto: und die konfiguration in der art und weise ist auch offen für zukünftige erweiterungen
12:21:40 Tony: nur sollten wir uns glaube ich keinen abbrechen bei der Verwaltung der geladenen Daten, das ist widerum Sorge der Factories.
12:21:54 Jomanto: wie gesagt, z.b. generators über python scripts :) 
12:22:17 Tony: klar, das wär sehr cool :)  Mit den Factories haben wir halt auch echt viele hübsche Möglichkeiten.
12:22:26 Jomanto: ne klar, wo das caching bzw. vorhalten im speicher passiert, müssen wir uns noch überlegen
12:23:00 Tony: aber wo kommt der ResourceContainer ins Spiel?
12:23:21 Jomanto: im grunde gehts nur darum den pfad über die konfiguration aufzulösen, die resource ist nur ein parameter für die jeweile VFS Implementierung
12:23:40 Jomanto: ui, stimmt. das hatte ich ja schon berücksichtigt... :) 
12:24:09 Tony: und ich weiss auch nciht, ob wir structure brauchen bzw. wo da der sinn ist
12:24:53 Tony: aber die Aufteilung gefällt mir: RL hat VFS im Bauch und verwaltet diese. Ich würde allerdings sagen, wir geben ne Art URI rein und kriegen die Daten einfach in einem stringstream zurück
12:24:56 Jomanto: vielleicht hatte ich mich falsch ausgedrückt. ich meine, dass einfach nur streams bzw. adressen aus den funktionen rauskommen
12:25:07 Tony: ah, ok!
12:25:22 Tony: meinst du, jetzt wäre der Zeitpunkt, um auf boost::filesystem umzustellen?
12:25:30 Jomanto: definitiv
12:25:33 Tony: wobei es eigentlich egal ist, wir bewegen uns ja eher davon weg
12:25:38 Jomanto: selbst für zip bräuchten wir das
12:25:42 Tony: wieso?
12:26:08 Jomanto: naja, je nachdem wie plattformunabhängig boost::filesystem ist, brauchen wir das beim zugriff auf lokale dateien nicht mehr berücksichtigen
12:26:28 Tony: ach so, um die eigentliche ZIP Datei aufzumachen meinst du?
12:26:38 Jomanto: ja, um zugriff auf lokale daten zu bekommen
12:26:54 Tony: hmm, stimmt
12:27:03 Jomanto: wäre grundsätzlich recht primitiv, aber warum neu machen, wenn wir das mit evtl. wenig overhead schon dabei haben
12:27:16 Tony: hmm
12:28:01 Tony: die zip-lib, die bei quake3 benutzt wird, will glaube ich einfach nen Pfad und gibt dir dann ein C-Interface, mittels dessen du auf den Inhalt zugreifst
12:28:14 Tony: ich glaub wir brauchen doch kein boost:fs, zunächst mal
12:28:37 Tony: weil wir mit unserer einfach Platform:: Implementation zurechtkommen
12:28:42 Tony: dann sparen wir da ein bischen Zeit
12:29:05 Jomanto: hmm.... wollen wir von anfang an zip umsetzen? wäre physical nicht erstmal naheliegender?
12:29:19 Tony: nene
12:29:34 Tony: definitv physical oder wie auch immer wir das nennen
12:29:44 Tony: aber wir brauchen dafür kein boost::fs
12:30:26 Jomanto: ja, der name läuft mir auch noch nicht rein... naja, dann müssten wir das mapping der konfiguration auf lokale strukturen auf jeden fall selbst machen
12:30:34 Jomanto: können wir ja erstmal so probieren
12:35:24 Jomanto: dann legen wir einfach fest, dass die daten entweder im user directory stehen können oder direkt im programmverzeichnis
12:35:38 Jomanto: und fertig. alles andere macht eh keinen sinn
12:35:56 Tony: eben :) 
12:36:41 Jomanto: dann ist die syntax fest, z.b. "/user/" und wir lösen das dann über Platform.h auf
12:36:44 Jomanto: cool :) 
12:37:16 Tony: momoment
12:37:30 Tony: du willst ne URI/URL aufbauen, die wir parsen, oder?
12:37:40 Jomanto: jau, richtig
12:38:14 Tony: dann sollten wir das spezifizieren. hmmm. hätte uns boost::fs dabei geholfen oder wei bist du überhaupt darauf gekommen?
12:38:34 Tony: http://www.zedshaw.com/rants/indirection_is_not_abstraction.html
12:39:33 Jomanto: ne, nicht deshalb. mir gings ums auflösen von lokalen strukturen. was die uri angeht macht das eh jedes FS selbst. du gibst von außen einfach immer nur "/fonts/suigeneris.ttf" rein und bekommst was raus. ob das FS intern per http:// oder sonstwas geht ist egal
12:41:46 Tony: hmm ... wie passt die Angabe einer location dann mit absoluten pfaden zusammen und warum müssen wir überhaupt die locations nochmal indirekt angeben? wir haben doch eh schon mit Platform ne abstraktion? Ob ich dann file(Platform::getUserHome).write() mache oder vfs.write("/userhome/config") bringt keinen Vorteil, nur müssen wir bei der zweiten Variante mehr Code implementieren der nix bringt
12:43:15 Jomanto: wtf?
12:43:26 Tony: ? :) 
12:43:42 Jomanto: entweder reden wir aneinander vorbei oder ich raffs grad nicht.
12:44:04 Tony: macht nix, können wir auch morgen weiterbesprechen :)  
12:44:27 Jomanto: jau, das log kommt wieder ins subversion
12:45:32 Tony: auf jeden Fall haben wir für morgen folgendes  zu tun: VFS/RL (um)bauen, image/fonts auf in-memory loading umstellen, factories anpassen und cahing in die factories verlegen wos hingehört, Konzept für ui/window/view loading, weiter an den Controls schrieben und testen
12:45:54 Jomanto: jau, hört sich gut an
12:46:10 Tony: ich muss dann noch auf meiner Seite OpenGl debuggen, aber evtl. ist da einfach wirklich der wurm drin in usnerem ReftTest Projekt, wenn nicht al die Bitmap auf dem Screen erscheint
12:46:34 Jomanto: ja, das finde ich auch komisch. habs nicht hinbekommen
