#ifndef LOST_FONT_FREETYPE_GLYPH_H
#define LOST_FONT_FREETYPE_GLYPH_H

#include "lost/gl/gl.h"
#include "lost/gl/Utils.h"
#include "lost/gl/Draw.h"
#include "lost/math/Rect.h"

namespace boost { template <typename T> class shared_ptr; };

namespace lost
{
  namespace gl { struct Texture; };

  namespace font
  {
    namespace freetype
    {
      /** encapsulates everything needed to draw a character thats been converted to a texture onto a quad.
       */
      struct Glyph
      {
        /** Constructs a Glyph with everything required for drawing it onto a textured quad.
         *
         * @param tex   the texture containing the actual bitmap data.
         * @param rect  the rectange containing the size of the quad which is usually the size of the original glyph bitmap
         * @paran maxu  the maximum U coordinate in texture space
         * @paran maxv  the maximum V coordinate in texture space
         */
        Glyph(boost::shared_ptr<lost::gl::Texture>  tex,
                                                    const lost::math::Rect& rect,
                                                    float maxu,
                                                    float maxv,
                                                    signed long inXOffset,
                                                    signed long inYOffset,
                                                    signed long inAdvance);

        virtual ~Glyph();

        /** draws a quad using the rect coordinates and the glyph texture.
         * This is a minimal drawing routine thats missing some important parts that should be set
         * before Glyph::draw() is called:
         * * all glyph textures will require glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
         * * texturing should be enabled via glEnable(GL_TEXTURE_2D);
         * These parameters are omitted so the client code can put Glyphs into a DisplayList easily and maintain full control.
         *
         * Notes on the drawing:
         * The bitmaps generated by freetype are flipped upside down which is compensated in the texture coordinates.
         * For best rendering quality, the glyph textures shouldn't be stretched or shrunk. Curiously, this is only the case
         * if the quad coords are e.g. x+rect.width which is actually one pixel too large. I'm not sure why this is the case.
         *
         */
        void draw(float xoffset = 0, float yoffset = 0);

        lost::math::Rect& rect() { return mRect; }
        signed long xoffset() { return mXOffset; }
        signed long yoffset() { return mYOffset; }
        signed long advance() { return mAdvance; }

      private:
        boost::shared_ptr<lost::gl::Texture>  mTexture;
        lost::math::Rect                      mRect;
        float                                 mMaxU;
        float                                 mMaxV;
        // calculated from freetype glyph metrics for correct positioning
        signed long                           mXOffset;
        signed long                           mYOffset;
        signed long                           mAdvance;
      };
    }
  }
}

#endif
